<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.exam.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.example.exam.model.User">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="user_number" jdbcType="VARCHAR" property="userNumber" />
    <result column="user_password" jdbcType="VARCHAR" property="userPassword" />
    <result column="user_cookie" jdbcType="VARCHAR" property="userCookie" />
    <result column="user_role" jdbcType="VARCHAR" property="userRole" />
    <result column="user_permission" jdbcType="VARCHAR" property="userPermission" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.exam.model.User">
    <result column="classes_list" jdbcType="LONGVARCHAR" property="classesList" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_id, user_name, user_number, user_password, user_cookie, user_role, user_permission
  </sql>
  <sql id="Blob_Column_List">
    classes_list
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.example.exam.model.UserExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.example.exam.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>

  <select id="selectByUserNumber" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    where user_number = #{userNumber,jdbcType=VARCHAR}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.exam.model.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.exam.model.User" useGeneratedKeys="true" keyProperty="userId">
    insert into user (user_id, user_name, user_number, 
      user_password, user_cookie, user_role, 
      user_permission, classes_list)
    values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{userNumber,jdbcType=VARCHAR}, 
      #{userPassword,jdbcType=VARCHAR}, #{userCookie,jdbcType=VARCHAR}, #{userRole,jdbcType=VARCHAR}, 
      #{userPermission,jdbcType=VARCHAR}, #{classesList,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.exam.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="userNumber != null">
        user_number,
      </if>
      <if test="userPassword != null">
        user_password,
      </if>
      <if test="userCookie != null">
        user_cookie,
      </if>
      <if test="userRole != null">
        user_role,
      </if>
      <if test="userPermission != null">
        user_permission,
      </if>
      <if test="classesList != null">
        classes_list,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userNumber != null">
        #{userNumber,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null">
        #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="userCookie != null">
        #{userCookie,jdbcType=VARCHAR},
      </if>
      <if test="userRole != null">
        #{userRole,jdbcType=VARCHAR},
      </if>
      <if test="userPermission != null">
        #{userPermission,jdbcType=VARCHAR},
      </if>
      <if test="classesList != null">
        #{classesList,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.exam.model.UserExample" resultType="java.lang.Integer">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.userName != null">
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.userNumber != null">
        user_number = #{record.userNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.userPassword != null">
        user_password = #{record.userPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.userCookie != null">
        user_cookie = #{record.userCookie,jdbcType=VARCHAR},
      </if>
      <if test="record.userRole != null">
        user_role = #{record.userRole,jdbcType=VARCHAR},
      </if>
      <if test="record.userPermission != null">
        user_permission = #{record.userPermission,jdbcType=VARCHAR},
      </if>
      <if test="record.classesList != null">
        classes_list = #{record.classesList,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update user
    set user_id = #{record.userId,jdbcType=INTEGER},
      user_name = #{record.userName,jdbcType=VARCHAR},
      user_number = #{record.userNumber,jdbcType=VARCHAR},
      user_password = #{record.userPassword,jdbcType=VARCHAR},
      user_cookie = #{record.userCookie,jdbcType=VARCHAR},
      user_role = #{record.userRole,jdbcType=VARCHAR},
      user_permission = #{record.userPermission,jdbcType=VARCHAR},
      classes_list = #{record.classesList,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set user_id = #{record.userId,jdbcType=INTEGER},
      user_name = #{record.userName,jdbcType=VARCHAR},
      user_number = #{record.userNumber,jdbcType=VARCHAR},
      user_password = #{record.userPassword,jdbcType=VARCHAR},
      user_cookie = #{record.userCookie,jdbcType=VARCHAR},
      user_role = #{record.userRole,jdbcType=VARCHAR},
      user_permission = #{record.userPermission,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.exam.model.User">
    update user
    <set>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userNumber != null">
        user_number = #{userNumber,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null">
        user_password = #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="userCookie != null">
        user_cookie = #{userCookie,jdbcType=VARCHAR},
      </if>
      <if test="userRole != null">
        user_role = #{userRole,jdbcType=VARCHAR},
      </if>
      <if test="userPermission != null">
        user_permission = #{userPermission,jdbcType=VARCHAR},
      </if>
      <if test="classesList != null">
        classes_list = #{classesList,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.exam.model.User">
    update user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_number = #{userNumber,jdbcType=VARCHAR},
      user_password = #{userPassword,jdbcType=VARCHAR},
      user_cookie = #{userCookie,jdbcType=VARCHAR},
      user_role = #{userRole,jdbcType=VARCHAR},
      user_permission = #{userPermission,jdbcType=VARCHAR},
      classes_list = #{classesList,jdbcType=LONGVARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.exam.model.User">
    update user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_number = #{userNumber,jdbcType=VARCHAR},
      user_password = #{userPassword,jdbcType=VARCHAR},
      user_cookie = #{userCookie,jdbcType=VARCHAR},
      user_role = #{userRole,jdbcType=VARCHAR},
      user_permission = #{userPermission,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
</mapper>