<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.exam.mapper.ClassesMapper">
  <resultMap id="BaseResultMap" type="com.example.exam.model.Classes">
    <id column="classes_id" jdbcType="INTEGER" property="classesId" />
    <result column="teacher_id" jdbcType="INTEGER" property="teacherId" />
    <result column="classes_name" jdbcType="VARCHAR" property="classesName" />
    <result column="classes_time" jdbcType="VARCHAR" property="classesTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.exam.model.Classes">
    <result column="student_list" jdbcType="LONGVARCHAR" property="studentList" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    classes_id, teacher_id, classes_name, classes_time
  </sql>
  <sql id="Blob_Column_List">
    student_list
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.example.exam.model.ClassesExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from classes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.example.exam.model.ClassesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from classes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from classes
    where classes_id = #{classesId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from classes
    where classes_id = #{classesId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.exam.model.ClassesExample">
    delete from classes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.exam.model.Classes">
    insert into classes (classes_id, teacher_id, classes_name, 
      classes_time, student_list)
    values (#{classesId,jdbcType=INTEGER}, #{teacherId,jdbcType=INTEGER}, #{classesName,jdbcType=VARCHAR}, 
      #{classesTime,jdbcType=VARCHAR}, #{studentList,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.exam.model.Classes">
    insert into classes
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="classesId != null">
        classes_id,
      </if>
      <if test="teacherId != null">
        teacher_id,
      </if>
      <if test="classesName != null">
        classes_name,
      </if>
      <if test="classesTime != null">
        classes_time,
      </if>
      <if test="studentList != null">
        student_list,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="classesId != null">
        #{classesId,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null">
        #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="classesName != null">
        #{classesName,jdbcType=VARCHAR},
      </if>
      <if test="classesTime != null">
        #{classesTime,jdbcType=VARCHAR},
      </if>
      <if test="studentList != null">
        #{studentList,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.exam.model.ClassesExample" resultType="java.lang.Integer">
    select count(*) from classes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update classes
    <set>
      <if test="record.classesId != null">
        classes_id = #{record.classesId,jdbcType=INTEGER},
      </if>
      <if test="record.teacherId != null">
        teacher_id = #{record.teacherId,jdbcType=INTEGER},
      </if>
      <if test="record.classesName != null">
        classes_name = #{record.classesName,jdbcType=VARCHAR},
      </if>
      <if test="record.classesTime != null">
        classes_time = #{record.classesTime,jdbcType=VARCHAR},
      </if>
      <if test="record.studentList != null">
        student_list = #{record.studentList,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update classes
    set classes_id = #{record.classesId,jdbcType=INTEGER},
      teacher_id = #{record.teacherId,jdbcType=INTEGER},
      classes_name = #{record.classesName,jdbcType=VARCHAR},
      classes_time = #{record.classesTime,jdbcType=VARCHAR},
      student_list = #{record.studentList,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update classes
    set classes_id = #{record.classesId,jdbcType=INTEGER},
      teacher_id = #{record.teacherId,jdbcType=INTEGER},
      classes_name = #{record.classesName,jdbcType=VARCHAR},
      classes_time = #{record.classesTime,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.exam.model.Classes">
    update classes
    <set>
      <if test="teacherId != null">
        teacher_id = #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="classesName != null">
        classes_name = #{classesName,jdbcType=VARCHAR},
      </if>
      <if test="classesTime != null">
        classes_time = #{classesTime,jdbcType=VARCHAR},
      </if>
      <if test="studentList != null">
        student_list = #{studentList,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where classes_id = #{classesId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.exam.model.Classes">
    update classes
    set teacher_id = #{teacherId,jdbcType=INTEGER},
      classes_name = #{classesName,jdbcType=VARCHAR},
      classes_time = #{classesTime,jdbcType=VARCHAR},
      student_list = #{studentList,jdbcType=LONGVARCHAR}
    where classes_id = #{classesId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.exam.model.Classes">
    update classes
    set teacher_id = #{teacherId,jdbcType=INTEGER},
      classes_name = #{classesName,jdbcType=VARCHAR},
      classes_time = #{classesTime,jdbcType=VARCHAR}
    where classes_id = #{classesId,jdbcType=INTEGER}
  </update>
</mapper>