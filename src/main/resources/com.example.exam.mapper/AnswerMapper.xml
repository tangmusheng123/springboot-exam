<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.exam.mapper.AnswerMapper">
  <resultMap id="BaseResultMap" type="com.example.exam.model.Answer">
    <id column="answer_id" jdbcType="INTEGER" property="answerId" />
    <result column="student_id" jdbcType="INTEGER" property="studentId" />
    <result column="exam_id" jdbcType="INTEGER" property="examId" />
    <result column="answer_time" jdbcType="VARCHAR" property="answerTime" />
    <result column="answer_allgrade" jdbcType="REAL" property="answerAllgrade" />
    <result column="answer_y" jdbcType="INTEGER" property="answerY" />
    <result column="answer_n" jdbcType="INTEGER" property="answerN" />
    <result column="answer_all" jdbcType="INTEGER" property="answerAll" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.exam.model.Answer">
    <result column="answer_result" jdbcType="LONGVARCHAR" property="answerResult" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    answer_id, student_id, exam_id, answer_time, answer_allgrade, answer_y, answer_n, 
    answer_all
  </sql>
  <sql id="Blob_Column_List">
    answer_result
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.example.exam.model.AnswerExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from answer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.example.exam.model.AnswerExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from answer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from answer
    where answer_id = #{answerId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from answer
    where answer_id = #{answerId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.exam.model.AnswerExample">
    delete from answer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.exam.model.Answer">
    insert into answer (answer_id, student_id, exam_id, 
      answer_time, answer_allgrade, answer_y, 
      answer_n, answer_all, answer_result
      )
    values (#{answerId,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER}, #{examId,jdbcType=INTEGER}, 
      #{answerTime,jdbcType=VARCHAR}, #{answerAllgrade,jdbcType=REAL}, #{answerY,jdbcType=INTEGER}, 
      #{answerN,jdbcType=INTEGER}, #{answerAll,jdbcType=INTEGER}, #{answerResult,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.exam.model.Answer">
    insert into answer
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="answerId != null">
        answer_id,
      </if>
      <if test="studentId != null">
        student_id,
      </if>
      <if test="examId != null">
        exam_id,
      </if>
      <if test="answerTime != null">
        answer_time,
      </if>
      <if test="answerAllgrade != null">
        answer_allgrade,
      </if>
      <if test="answerY != null">
        answer_y,
      </if>
      <if test="answerN != null">
        answer_n,
      </if>
      <if test="answerAll != null">
        answer_all,
      </if>
      <if test="answerResult != null">
        answer_result,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="answerId != null">
        #{answerId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null">
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="examId != null">
        #{examId,jdbcType=INTEGER},
      </if>
      <if test="answerTime != null">
        #{answerTime,jdbcType=VARCHAR},
      </if>
      <if test="answerAllgrade != null">
        #{answerAllgrade,jdbcType=REAL},
      </if>
      <if test="answerY != null">
        #{answerY,jdbcType=INTEGER},
      </if>
      <if test="answerN != null">
        #{answerN,jdbcType=INTEGER},
      </if>
      <if test="answerAll != null">
        #{answerAll,jdbcType=INTEGER},
      </if>
      <if test="answerResult != null">
        #{answerResult,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.exam.model.AnswerExample" resultType="java.lang.Integer">
    select count(*) from answer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update answer
    <set>
      <if test="record.answerId != null">
        answer_id = #{record.answerId,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null">
        student_id = #{record.studentId,jdbcType=INTEGER},
      </if>
      <if test="record.examId != null">
        exam_id = #{record.examId,jdbcType=INTEGER},
      </if>
      <if test="record.answerTime != null">
        answer_time = #{record.answerTime,jdbcType=VARCHAR},
      </if>
      <if test="record.answerAllgrade != null">
        answer_allgrade = #{record.answerAllgrade,jdbcType=REAL},
      </if>
      <if test="record.answerY != null">
        answer_y = #{record.answerY,jdbcType=INTEGER},
      </if>
      <if test="record.answerN != null">
        answer_n = #{record.answerN,jdbcType=INTEGER},
      </if>
      <if test="record.answerAll != null">
        answer_all = #{record.answerAll,jdbcType=INTEGER},
      </if>
      <if test="record.answerResult != null">
        answer_result = #{record.answerResult,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update answer
    set answer_id = #{record.answerId,jdbcType=INTEGER},
      student_id = #{record.studentId,jdbcType=INTEGER},
      exam_id = #{record.examId,jdbcType=INTEGER},
      answer_time = #{record.answerTime,jdbcType=VARCHAR},
      answer_allgrade = #{record.answerAllgrade,jdbcType=REAL},
      answer_y = #{record.answerY,jdbcType=INTEGER},
      answer_n = #{record.answerN,jdbcType=INTEGER},
      answer_all = #{record.answerAll,jdbcType=INTEGER},
      answer_result = #{record.answerResult,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update answer
    set answer_id = #{record.answerId,jdbcType=INTEGER},
      student_id = #{record.studentId,jdbcType=INTEGER},
      exam_id = #{record.examId,jdbcType=INTEGER},
      answer_time = #{record.answerTime,jdbcType=VARCHAR},
      answer_allgrade = #{record.answerAllgrade,jdbcType=REAL},
      answer_y = #{record.answerY,jdbcType=INTEGER},
      answer_n = #{record.answerN,jdbcType=INTEGER},
      answer_all = #{record.answerAll,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.exam.model.Answer">
    update answer
    <set>
      <if test="studentId != null">
        student_id = #{studentId,jdbcType=INTEGER},
      </if>
      <if test="examId != null">
        exam_id = #{examId,jdbcType=INTEGER},
      </if>
      <if test="answerTime != null">
        answer_time = #{answerTime,jdbcType=VARCHAR},
      </if>
      <if test="answerAllgrade != null">
        answer_allgrade = #{answerAllgrade,jdbcType=REAL},
      </if>
      <if test="answerY != null">
        answer_y = #{answerY,jdbcType=INTEGER},
      </if>
      <if test="answerN != null">
        answer_n = #{answerN,jdbcType=INTEGER},
      </if>
      <if test="answerAll != null">
        answer_all = #{answerAll,jdbcType=INTEGER},
      </if>
      <if test="answerResult != null">
        answer_result = #{answerResult,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where answer_id = #{answerId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.exam.model.Answer">
    update answer
    set student_id = #{studentId,jdbcType=INTEGER},
      exam_id = #{examId,jdbcType=INTEGER},
      answer_time = #{answerTime,jdbcType=VARCHAR},
      answer_allgrade = #{answerAllgrade,jdbcType=REAL},
      answer_y = #{answerY,jdbcType=INTEGER},
      answer_n = #{answerN,jdbcType=INTEGER},
      answer_all = #{answerAll,jdbcType=INTEGER},
      answer_result = #{answerResult,jdbcType=LONGVARCHAR}
    where answer_id = #{answerId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.exam.model.Answer">
    update answer
    set student_id = #{studentId,jdbcType=INTEGER},
      exam_id = #{examId,jdbcType=INTEGER},
      answer_time = #{answerTime,jdbcType=VARCHAR},
      answer_allgrade = #{answerAllgrade,jdbcType=REAL},
      answer_y = #{answerY,jdbcType=INTEGER},
      answer_n = #{answerN,jdbcType=INTEGER},
      answer_all = #{answerAll,jdbcType=INTEGER}
    where answer_id = #{answerId,jdbcType=INTEGER}
  </update>
</mapper>